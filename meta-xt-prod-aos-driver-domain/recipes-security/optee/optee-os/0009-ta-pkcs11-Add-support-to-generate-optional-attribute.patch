From 438c40145764899c95aa279a166efee66fa5f9ba Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Vesa=20J=C3=A4=C3=A4skel=C3=A4inen?=
 <vesa.jaaskelainen@vaisala.com>
Date: Thu, 8 Apr 2021 15:26:23 +0300
Subject: [PATCH 09/10] ta: pkcs11: Add support to generate optional attributes
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Some PKCS#11 objects can have optional attributes.

When those are queried response should be returned.

Add support to generate empty value for PKCS11_CKA_ALLOWED_MECHANISMS.

Signed-off-by: Vesa Jääskeläinen <vesa.jaaskelainen@vaisala.com>
---
 ta/pkcs11/src/object.c            |  8 ++++++++
 ta/pkcs11/src/pkcs11_attributes.c | 19 +++++++++++++++++++
 ta/pkcs11/src/pkcs11_attributes.h | 13 +++++++++++++
 3 files changed, 40 insertions(+)

diff --git a/ta/pkcs11/src/object.c b/ta/pkcs11/src/object.c
index 09302417..ac967b37 100644
--- a/ta/pkcs11/src/object.c
+++ b/ta/pkcs11/src/object.c
@@ -856,6 +856,14 @@ enum pkcs11_rc entry_get_attribute_value(struct pkcs11_client *client,
 		 */
 		rc = get_attribute(obj->attributes, cli_head.id, data_ptr,
 				   &cli_head.size);
+
+		if (rc == PKCS11_RV_NOT_FOUND) {
+			/* Check if we can generate the optional value */
+			rc = generate_optional_attribute(obj->attributes,
+							 cli_head.id, data_ptr,
+							 &cli_head.size);
+		}
+
 		/* Check 2. */
 		switch (rc) {
 		case PKCS11_CKR_OK:
diff --git a/ta/pkcs11/src/pkcs11_attributes.c b/ta/pkcs11/src/pkcs11_attributes.c
index 0297ea6a..121211fc 100644
--- a/ta/pkcs11/src/pkcs11_attributes.c
+++ b/ta/pkcs11/src/pkcs11_attributes.c
@@ -2138,3 +2138,22 @@ enum pkcs11_rc add_missing_attribute_id(struct obj_attrs **pub_head,
 	else
 		return set_attribute(pub_head, PKCS11_CKA_ID, id2, id2_size);
 }
+
+enum pkcs11_rc generate_optional_attribute(struct obj_attrs *head,
+					   uint32_t attribute, void *attr __unused,
+					   uint32_t *attr_size)
+{
+	uint32_t class = get_class(head);
+
+	if (pkcs11_attr_class_is_key(class)) {
+		/* Handle optional key class attributes */
+
+		/* Attributes from 'any_key_optional' */
+		if (attribute == PKCS11_CKA_ALLOWED_MECHANISMS) {
+			*attr_size = 0;
+			return PKCS11_CKR_OK;
+		}
+	}
+
+	return PKCS11_RV_NOT_FOUND;
+}
diff --git a/ta/pkcs11/src/pkcs11_attributes.h b/ta/pkcs11/src/pkcs11_attributes.h
index e9e1d47a..1b159bdd 100644
--- a/ta/pkcs11/src/pkcs11_attributes.h
+++ b/ta/pkcs11/src/pkcs11_attributes.h
@@ -198,4 +198,17 @@ enum pkcs11_rc set_key_data(struct obj_attrs **head, void *data,
 enum pkcs11_rc add_missing_attribute_id(struct obj_attrs **pub_head,
 					struct obj_attrs **priv_head);
 
+/*
+ * Generate optional attribute value if possible.
+ *
+ * @head - Object attributes
+ * @attribute - Attribute ID
+ * @attr - Buffer where to write result
+ * @attr_size - Size of buffer
+ * Return an PKCS11 return code
+ */
+enum pkcs11_rc generate_optional_attribute(struct obj_attrs *head,
+					   uint32_t attribute, void *attr,
+					   uint32_t *attr_size);
+
 #endif /*PKCS11_TA_PKCS11_ATTRIBUTES_H*/
-- 
2.25.1

