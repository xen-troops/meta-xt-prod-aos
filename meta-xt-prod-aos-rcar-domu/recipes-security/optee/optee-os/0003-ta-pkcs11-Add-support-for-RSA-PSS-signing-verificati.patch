From 8a1556525aba42cf21311b55c018108b0900ceb7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Vesa=20J=C3=A4=C3=A4skel=C3=A4inen?=
 <vesa.jaaskelainen@vaisala.com>
Date: Mon, 4 Jan 2021 15:10:56 +0200
Subject: [PATCH 03/10] ta: pkcs11: Add support for RSA PSS signing &
 verification
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add support for performing RSA PSS signing & verification operations for:

- PKCS #1 RSA PSS with supplied hash value
- Multi stage SHA-1
- Multi stage SHA-224
- Multi stage SHA-256
- Multi stage SHA-384
- Multi stage SHA-512

Specified in:
PKCS #11 Cryptographic Token Interface Current Mechanisms Specification
Version 2.40 Plus Errata 01
2.1.10 PKCS #1 RSA PSS

Signed-off-by: Vesa Jääskeläinen <vesa.jaaskelainen@vaisala.com>
---
 ta/pkcs11/include/pkcs11_ta.h      |  30 +++++++
 ta/pkcs11/src/pkcs11_attributes.c  |   6 ++
 ta/pkcs11/src/processing.c         |  13 +++
 ta/pkcs11/src/processing.h         |   8 ++
 ta/pkcs11/src/processing_asymm.c   |  95 +++++++++++++++++++++-
 ta/pkcs11/src/processing_rsa.c     | 125 +++++++++++++++++++++++++++++
 ta/pkcs11/src/token_capabilities.c |  22 +++++
 7 files changed, 296 insertions(+), 3 deletions(-)

diff --git a/ta/pkcs11/include/pkcs11_ta.h b/ta/pkcs11/include/pkcs11_ta.h
index 4c47420f..d8340604 100644
--- a/ta/pkcs11/include/pkcs11_ta.h
+++ b/ta/pkcs11/include/pkcs11_ta.h
@@ -1147,10 +1147,16 @@ enum pkcs11_mechanism_id {
 	PKCS11_CKM_RSA_PKCS			= 0x00001,
 	PKCS11_CKM_MD5_RSA_PKCS			= 0x00005,
 	PKCS11_CKM_SHA1_RSA_PKCS		= 0x00006,
+	PKCS11_CKM_RSA_PKCS_PSS			= 0x0000d,
+	PKCS11_CKM_SHA1_RSA_PKCS_PSS		= 0x0000e,
 	PKCS11_CKM_SHA256_RSA_PKCS		= 0x00040,
 	PKCS11_CKM_SHA384_RSA_PKCS		= 0x00041,
 	PKCS11_CKM_SHA512_RSA_PKCS		= 0x00042,
+	PKCS11_CKM_SHA256_RSA_PKCS_PSS		= 0x00043,
+	PKCS11_CKM_SHA384_RSA_PKCS_PSS		= 0x00044,
+	PKCS11_CKM_SHA512_RSA_PKCS_PSS		= 0x00045,
 	PKCS11_CKM_SHA224_RSA_PKCS		= 0x00046,
+	PKCS11_CKM_SHA224_RSA_PKCS_PSS		= 0x00047,
 	PKCS11_CKM_MD5				= 0x00210,
 	PKCS11_CKM_MD5_HMAC			= 0x00211,
 	PKCS11_CKM_SHA_1			= 0x00220,
@@ -1186,4 +1192,28 @@ enum pkcs11_mechanism_id {
 	PKCS11_PROCESSING_IMPORT		= 0x80000000,
 	PKCS11_CKM_UNDEFINED_ID			= PKCS11_UNDEFINED_ID,
 };
+
+/*
+ * PKCS11_CKD_<x> reflects CryptoKi client API key diff function IDs CKD_<x>.
+ */
+enum pkcs11_keydiff_id {
+	PKCS11_CKD_NULL				= 0x0001,
+	/* Vendor extension: reserved for undefined ID (~0U) */
+	PKCS11_CKD_UNDEFINED_ID			= PKCS11_UNDEFINED_ID,
+};
+
+/*
+ * Valid values MG function identifiers
+ * PKCS11_CKG_<x> reflects CryptoKi client API MG function IDs CKG_<x>.
+ */
+enum pkcs11_mgf_id {
+	PKCS11_CKG_MGF1_SHA1			= 0x0001,
+	PKCS11_CKG_MGF1_SHA224			= 0x0005,
+	PKCS11_CKG_MGF1_SHA256			= 0x0002,
+	PKCS11_CKG_MGF1_SHA384			= 0x0003,
+	PKCS11_CKG_MGF1_SHA512			= 0x0004,
+	/* Vendor extension: reserved for undefined ID (~0U) */
+	PKCS11_CKG_UNDEFINED_ID			= PKCS11_UNDEFINED_ID,
+};
+
 #endif /*PKCS11_TA_H*/
diff --git a/ta/pkcs11/src/pkcs11_attributes.c b/ta/pkcs11/src/pkcs11_attributes.c
index e19bffee..91b3a747 100644
--- a/ta/pkcs11/src/pkcs11_attributes.c
+++ b/ta/pkcs11/src/pkcs11_attributes.c
@@ -1516,10 +1516,16 @@ check_parent_attrs_against_processing(enum pkcs11_mechanism_id proc_id,
 	case PKCS11_CKM_RSA_PKCS:
 	case PKCS11_CKM_MD5_RSA_PKCS:
 	case PKCS11_CKM_SHA1_RSA_PKCS:
+	case PKCS11_CKM_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
 	case PKCS11_CKM_SHA256_RSA_PKCS:
 	case PKCS11_CKM_SHA384_RSA_PKCS:
 	case PKCS11_CKM_SHA512_RSA_PKCS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
 	case PKCS11_CKM_SHA224_RSA_PKCS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
 		if (key_type != PKCS11_CKK_RSA) {
 			EMSG("Invalid key %s for mechanism %s",
 			     id2str_type(key_type, key_class),
diff --git a/ta/pkcs11/src/processing.c b/ta/pkcs11/src/processing.c
index e9197e25..7971e25c 100644
--- a/ta/pkcs11/src/processing.c
+++ b/ta/pkcs11/src/processing.c
@@ -104,6 +104,19 @@ void release_active_processing(struct pkcs11_session *session)
 	if (!session->processing)
 		return;
 
+	switch (session->processing->mecha_type) {
+	case PKCS11_CKM_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
+		tee_release_rsa_pss_operation(session->processing);
+		break;
+	default:
+		break;
+	}
+
 	if (session->processing->tee_hash_op_handle != TEE_HANDLE_NULL) {
 		TEE_FreeOperation(session->processing->tee_hash_op_handle);
 		session->processing->tee_hash_op_handle = TEE_HANDLE_NULL;
diff --git a/ta/pkcs11/src/processing.h b/ta/pkcs11/src/processing.h
index 99af9e8f..e2ef00ee 100644
--- a/ta/pkcs11/src/processing.h
+++ b/ta/pkcs11/src/processing.h
@@ -131,6 +131,14 @@ enum pkcs11_rc load_tee_rsa_key_attrs(TEE_Attribute **tee_attrs,
 				      size_t *tee_count,
 				      struct pkcs11_object *obj);
 
+enum pkcs11_rc pkcs2tee_proc_params_rsa_pss(struct active_processing *proc,
+					    struct pkcs11_attribute_head *par);
+
+void tee_release_rsa_pss_operation(struct active_processing *processing);
+
+enum pkcs11_rc pkcs2tee_algo_rsa_pss(uint32_t *tee_id,
+				     struct pkcs11_attribute_head *params);
+
 enum pkcs11_rc generate_rsa_keys(struct pkcs11_attribute_head *proc_params,
 				 struct obj_attrs **pub_head,
 				 struct obj_attrs **priv_head);
diff --git a/ta/pkcs11/src/processing_asymm.c b/ta/pkcs11/src/processing_asymm.c
index 09ea2fb3..706bdfb7 100644
--- a/ta/pkcs11/src/processing_asymm.c
+++ b/ta/pkcs11/src/processing_asymm.c
@@ -20,12 +20,18 @@ bool processing_is_tee_asymm(uint32_t proc_id)
 	switch (proc_id) {
 	/* RSA flavors */
 	case PKCS11_CKM_RSA_PKCS:
+	case PKCS11_CKM_RSA_PKCS_PSS:
 	case PKCS11_CKM_MD5_RSA_PKCS:
 	case PKCS11_CKM_SHA1_RSA_PKCS:
 	case PKCS11_CKM_SHA224_RSA_PKCS:
 	case PKCS11_CKM_SHA256_RSA_PKCS:
 	case PKCS11_CKM_SHA384_RSA_PKCS:
 	case PKCS11_CKM_SHA512_RSA_PKCS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
 	/* EC flavors */
 	case PKCS11_CKM_ECDSA:
 	case PKCS11_CKM_ECDSA_SHA1:
@@ -52,6 +58,7 @@ pkcs2tee_algorithm(uint32_t *tee_id, uint32_t *tee_hash_id,
 	} pkcs2tee_algo[] = {
 		/* RSA flavors */
 		{ PKCS11_CKM_RSA_PKCS, TEE_ALG_RSAES_PKCS1_V1_5, 0 },
+		{ PKCS11_CKM_RSA_PKCS_PSS, 1, 0 },
 		{ PKCS11_CKM_MD5_RSA_PKCS, TEE_ALG_RSASSA_PKCS1_V1_5_MD5,
 		  TEE_ALG_MD5 },
 		{ PKCS11_CKM_SHA1_RSA_PKCS, TEE_ALG_RSASSA_PKCS1_V1_5_SHA1,
@@ -64,6 +71,16 @@ pkcs2tee_algorithm(uint32_t *tee_id, uint32_t *tee_hash_id,
 		  TEE_ALG_SHA384 },
 		{ PKCS11_CKM_SHA512_RSA_PKCS, TEE_ALG_RSASSA_PKCS1_V1_5_SHA512,
 		  TEE_ALG_SHA512 },
+		{ PKCS11_CKM_SHA1_RSA_PKCS_PSS,
+		  TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1, TEE_ALG_SHA1 },
+		{ PKCS11_CKM_SHA224_RSA_PKCS_PSS,
+		  TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224, TEE_ALG_SHA224 },
+		{ PKCS11_CKM_SHA256_RSA_PKCS_PSS,
+		  TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256, TEE_ALG_SHA256 },
+		{ PKCS11_CKM_SHA384_RSA_PKCS_PSS,
+		  TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384, TEE_ALG_SHA384 },
+		{ PKCS11_CKM_SHA512_RSA_PKCS_PSS,
+		  TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512, TEE_ALG_SHA512 },
 		/* EC flavors (Must find key size from the object) */
 		{ PKCS11_CKM_ECDSA, 1, 0 },
 		{ PKCS11_CKM_ECDSA_SHA1, 1, TEE_ALG_SHA1 },
@@ -87,6 +104,14 @@ pkcs2tee_algorithm(uint32_t *tee_id, uint32_t *tee_hash_id,
 		return PKCS11_RV_NOT_IMPLEMENTED;
 
 	switch (proc_params->id) {
+	case PKCS11_CKM_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
+		rc = pkcs2tee_algo_rsa_pss(tee_id, proc_params);
+		break;
 	case PKCS11_CKM_ECDSA:
 	case PKCS11_CKM_ECDSA_SHA1:
 	case PKCS11_CKM_ECDSA_SHA224:
@@ -308,10 +333,26 @@ error:
 }
 
 static enum pkcs11_rc
-init_tee_operation(struct pkcs11_session *session __unused,
-		   struct pkcs11_attribute_head *proc_params __unused)
+init_tee_operation(struct pkcs11_session *session,
+		   struct pkcs11_attribute_head *proc_params)
 {
-	return PKCS11_CKR_OK;
+	enum pkcs11_rc rc = PKCS11_CKR_OK;
+
+	switch (proc_params->id) {
+	case PKCS11_CKM_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
+		rc = pkcs2tee_proc_params_rsa_pss(session->processing,
+						  proc_params);
+		break;
+	default:
+		break;
+	}
+
+	return rc;
 }
 
 enum pkcs11_rc init_asymm_operation(struct pkcs11_session *session,
@@ -360,6 +401,7 @@ enum pkcs11_rc step_asymm_operation(struct pkcs11_session *session,
 	uint32_t hash_size = 0;
 	TEE_Attribute *tee_attrs = NULL;
 	size_t tee_attrs_count = 0;
+	uint32_t data32 = 0;
 	bool output_data = false;
 	struct active_processing *proc = session->processing;
 	size_t sz = 0;
@@ -394,6 +436,31 @@ enum pkcs11_rc step_asymm_operation(struct pkcs11_session *session,
 		return PKCS11_CKR_GENERAL_ERROR;
 	}
 
+	/* TEE attribute(s) required by the operation */
+	switch (proc->mecha_type) {
+	case PKCS11_CKM_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
+		tee_attrs = TEE_Malloc(sizeof(TEE_Attribute),
+				       TEE_USER_MEM_HINT_NO_FILL_ZERO);
+		if (!tee_attrs) {
+			rc = PKCS11_CKR_DEVICE_MEMORY;
+			goto out;
+		}
+
+		data32 = *(uint32_t *)proc->extra_ctx;
+		TEE_InitValueAttribute(&tee_attrs[tee_attrs_count],
+				       TEE_ATTR_RSA_PSS_SALT_LENGTH,
+				       data32, 0);
+		tee_attrs_count++;
+		break;
+	default:
+		break;
+	}
+
 	/*
 	 * Handle multi stage update step for mechas needing hash
 	 * calculation
@@ -411,6 +478,11 @@ enum pkcs11_rc step_asymm_operation(struct pkcs11_session *session,
 		case PKCS11_CKM_SHA256_RSA_PKCS:
 		case PKCS11_CKM_SHA384_RSA_PKCS:
 		case PKCS11_CKM_SHA512_RSA_PKCS:
+		case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+		case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+		case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+		case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
+		case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
 			assert(proc->tee_hash_op_handle != TEE_HANDLE_NULL);
 
 			TEE_DigestUpdate(proc->tee_hash_op_handle, in_buf,
@@ -444,6 +516,11 @@ enum pkcs11_rc step_asymm_operation(struct pkcs11_session *session,
 	case PKCS11_CKM_SHA256_RSA_PKCS:
 	case PKCS11_CKM_SHA384_RSA_PKCS:
 	case PKCS11_CKM_SHA512_RSA_PKCS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
 		assert(proc->tee_hash_op_handle != TEE_HANDLE_NULL);
 
 		hash_size = TEE_ALG_GET_DIGEST_SIZE(proc->tee_hash_algo);
@@ -516,6 +593,12 @@ enum pkcs11_rc step_asymm_operation(struct pkcs11_session *session,
 	case PKCS11_CKM_SHA256_RSA_PKCS:
 	case PKCS11_CKM_SHA384_RSA_PKCS:
 	case PKCS11_CKM_SHA512_RSA_PKCS:
+	case PKCS11_CKM_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
 		/*
 		 * Constraints on key types and the length of the data for
 		 * these mechanisms are summarized in the following table.
@@ -549,6 +632,7 @@ enum pkcs11_rc step_asymm_operation(struct pkcs11_session *session,
 	switch (proc->mecha_type) {
 	case PKCS11_CKM_ECDSA:
 	case PKCS11_CKM_RSA_PKCS:
+	case PKCS11_CKM_RSA_PKCS_PSS:
 		/* For operations using provided input data */
 		switch (function) {
 		case PKCS11_FUNCTION_ENCRYPT:
@@ -604,6 +688,11 @@ enum pkcs11_rc step_asymm_operation(struct pkcs11_session *session,
 	case PKCS11_CKM_SHA256_RSA_PKCS:
 	case PKCS11_CKM_SHA384_RSA_PKCS:
 	case PKCS11_CKM_SHA512_RSA_PKCS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
 		/* For operations having hash operation use calculated hash */
 		switch (function) {
 		case PKCS11_FUNCTION_SIGN:
diff --git a/ta/pkcs11/src/processing_rsa.c b/ta/pkcs11/src/processing_rsa.c
index 967ef12a..12c9193d 100644
--- a/ta/pkcs11/src/processing_rsa.c
+++ b/ta/pkcs11/src/processing_rsa.c
@@ -11,8 +11,133 @@
 
 #include "attributes.h"
 #include "object.h"
+#include "pkcs11_token.h"
 #include "processing.h"
 
+enum pkcs11_rc
+pkcs2tee_proc_params_rsa_pss(struct active_processing *processing,
+			     struct pkcs11_attribute_head *proc_params)
+{
+	struct serialargs args = { };
+	enum pkcs11_rc rc = PKCS11_CKR_GENERAL_ERROR;
+	uint32_t data32 = 0;
+	uint32_t salt_len = 0;
+
+	serialargs_init(&args, proc_params->data, proc_params->size);
+
+	rc = serialargs_get(&args, &data32, sizeof(uint32_t));
+	if (rc)
+		return rc;
+
+	rc = serialargs_get(&args, &data32, sizeof(uint32_t));
+	if (rc)
+		return rc;
+
+	rc = serialargs_get(&args, &salt_len, sizeof(uint32_t));
+	if (rc)
+		return rc;
+
+	if (serialargs_remaining_bytes(&args))
+		return PKCS11_CKR_ARGUMENTS_BAD;
+
+	processing->extra_ctx = TEE_Malloc(sizeof(uint32_t),
+					   TEE_USER_MEM_HINT_NO_FILL_ZERO);
+	if (!processing->extra_ctx)
+		return PKCS11_CKR_DEVICE_MEMORY;
+
+	*(uint32_t *)processing->extra_ctx = salt_len;
+
+	return PKCS11_CKR_OK;
+}
+
+void tee_release_rsa_pss_operation(struct active_processing *processing)
+{
+	TEE_Free(processing->extra_ctx);
+	processing->extra_ctx = NULL;
+}
+
+enum pkcs11_rc pkcs2tee_algo_rsa_pss(uint32_t *tee_id,
+				     struct pkcs11_attribute_head *proc_params)
+{
+	struct serialargs args = { };
+	enum pkcs11_rc rc = PKCS11_CKR_GENERAL_ERROR;
+	uint32_t hash = 0;
+	uint32_t mgf = 0;
+	uint32_t salt_len = 0;
+
+	serialargs_init(&args, proc_params->data, proc_params->size);
+
+	rc = serialargs_get(&args, &hash, sizeof(uint32_t));
+	if (rc)
+		return rc;
+
+	rc = serialargs_get(&args, &mgf, sizeof(uint32_t));
+	if (rc)
+		return rc;
+
+	rc = serialargs_get(&args, &salt_len, sizeof(uint32_t));
+	if (rc)
+		return rc;
+
+	if (serialargs_remaining_bytes(&args))
+		return PKCS11_CKR_ARGUMENTS_BAD;
+
+	if (proc_params->id == PKCS11_CKM_RSA_PKCS_PSS) {
+		if (hash == PKCS11_CKM_SHA_1 && mgf == PKCS11_CKG_MGF1_SHA1) {
+			*tee_id = TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1;
+			return PKCS11_CKR_OK;
+		}
+		if (hash == PKCS11_CKM_SHA224 &&
+		    mgf == PKCS11_CKG_MGF1_SHA224) {
+			*tee_id = TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224;
+			return PKCS11_CKR_OK;
+		}
+		if (hash == PKCS11_CKM_SHA256 &&
+		    mgf == PKCS11_CKG_MGF1_SHA256) {
+			*tee_id = TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256;
+			return PKCS11_CKR_OK;
+		}
+		if (hash == PKCS11_CKM_SHA384 &&
+		    mgf == PKCS11_CKG_MGF1_SHA384) {
+			*tee_id = TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384;
+			return PKCS11_CKR_OK;
+		}
+		if (hash == PKCS11_CKM_SHA512 &&
+		    mgf == PKCS11_CKG_MGF1_SHA512) {
+			*tee_id = TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512;
+			return PKCS11_CKR_OK;
+		}
+		return PKCS11_CKR_MECHANISM_PARAM_INVALID;
+	}
+
+	switch (*tee_id) {
+	case TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1:
+		if (hash != PKCS11_CKM_SHA_1 || mgf != PKCS11_CKG_MGF1_SHA1)
+			return PKCS11_CKR_MECHANISM_PARAM_INVALID;
+		break;
+	case TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224:
+		if (hash != PKCS11_CKM_SHA224 || mgf != PKCS11_CKG_MGF1_SHA224)
+			return PKCS11_CKR_MECHANISM_PARAM_INVALID;
+		break;
+	case TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256:
+		if (hash != PKCS11_CKM_SHA256 || mgf != PKCS11_CKG_MGF1_SHA256)
+			return PKCS11_CKR_MECHANISM_PARAM_INVALID;
+		break;
+	case TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384:
+		if (hash != PKCS11_CKM_SHA384 || mgf != PKCS11_CKG_MGF1_SHA384)
+			return PKCS11_CKR_MECHANISM_PARAM_INVALID;
+		break;
+	case TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512:
+		if (hash != PKCS11_CKM_SHA512 || mgf != PKCS11_CKG_MGF1_SHA512)
+			return PKCS11_CKR_MECHANISM_PARAM_INVALID;
+		break;
+	default:
+		return PKCS11_CKR_GENERAL_ERROR;
+	}
+
+	return PKCS11_CKR_OK;
+}
+
 enum pkcs11_rc load_tee_rsa_key_attrs(TEE_Attribute **tee_attrs,
 				      size_t *tee_count,
 				      struct pkcs11_object *obj)
diff --git a/ta/pkcs11/src/token_capabilities.c b/ta/pkcs11/src/token_capabilities.c
index 03593506..6603f432 100644
--- a/ta/pkcs11/src/token_capabilities.c
+++ b/ta/pkcs11/src/token_capabilities.c
@@ -108,12 +108,23 @@ static const struct pkcs11_mechachism_modes pkcs11_modes[] = {
 		  PKCS11_CKFM_GENERATE_KEY_PAIR, ANY_PART),
 	MECHANISM(PKCS11_CKM_RSA_PKCS, CKFM_CIPHER_WRAP | CKFM_AUTH_NO_RECOVER |
 		  CKFM_AUTH_WITH_RECOVER, SINGLE_PART_ONLY),
+	MECHANISM(PKCS11_CKM_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER,
+		  SINGLE_PART_ONLY),
 	MECHANISM(PKCS11_CKM_MD5_RSA_PKCS, CKFM_AUTH_NO_RECOVER, ANY_PART),
 	MECHANISM(PKCS11_CKM_SHA1_RSA_PKCS, CKFM_AUTH_NO_RECOVER, ANY_PART),
+	MECHANISM(PKCS11_CKM_SHA1_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER, ANY_PART),
 	MECHANISM(PKCS11_CKM_SHA256_RSA_PKCS, CKFM_AUTH_NO_RECOVER, ANY_PART),
 	MECHANISM(PKCS11_CKM_SHA384_RSA_PKCS, CKFM_AUTH_NO_RECOVER, ANY_PART),
 	MECHANISM(PKCS11_CKM_SHA512_RSA_PKCS, CKFM_AUTH_NO_RECOVER, ANY_PART),
+	MECHANISM(PKCS11_CKM_SHA256_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER,
+		  ANY_PART),
+	MECHANISM(PKCS11_CKM_SHA384_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER,
+		  ANY_PART),
+	MECHANISM(PKCS11_CKM_SHA512_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER,
+		  ANY_PART),
 	MECHANISM(PKCS11_CKM_SHA224_RSA_PKCS, CKFM_AUTH_NO_RECOVER, ANY_PART),
+	MECHANISM(PKCS11_CKM_SHA224_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER,
+		  ANY_PART),
 };
 
 #if CFG_TEE_TA_LOG_LEVEL > 0
@@ -226,12 +237,18 @@ const struct pkcs11_mechachism_modes token_mechanism[] = {
 	TA_MECHANISM(PKCS11_CKM_RSA_PKCS_KEY_PAIR_GEN,
 		     PKCS11_CKFM_GENERATE_KEY_PAIR),
 	TA_MECHANISM(PKCS11_CKM_RSA_PKCS, CKFM_CIPHER | CKFM_AUTH_NO_RECOVER),
+	TA_MECHANISM(PKCS11_CKM_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER),
 	TA_MECHANISM(PKCS11_CKM_MD5_RSA_PKCS, CKFM_AUTH_NO_RECOVER),
 	TA_MECHANISM(PKCS11_CKM_SHA1_RSA_PKCS, CKFM_AUTH_NO_RECOVER),
+	TA_MECHANISM(PKCS11_CKM_SHA1_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER),
 	TA_MECHANISM(PKCS11_CKM_SHA256_RSA_PKCS, CKFM_AUTH_NO_RECOVER),
 	TA_MECHANISM(PKCS11_CKM_SHA384_RSA_PKCS, CKFM_AUTH_NO_RECOVER),
 	TA_MECHANISM(PKCS11_CKM_SHA512_RSA_PKCS, CKFM_AUTH_NO_RECOVER),
+	TA_MECHANISM(PKCS11_CKM_SHA256_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER),
+	TA_MECHANISM(PKCS11_CKM_SHA384_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER),
+	TA_MECHANISM(PKCS11_CKM_SHA512_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER),
 	TA_MECHANISM(PKCS11_CKM_SHA224_RSA_PKCS, CKFM_AUTH_NO_RECOVER),
+	TA_MECHANISM(PKCS11_CKM_SHA224_RSA_PKCS_PSS, CKFM_AUTH_NO_RECOVER),
 };
 
 /*
@@ -345,10 +362,15 @@ void pkcs11_mechanism_supported_key_sizes(uint32_t proc_id,
 	case PKCS11_CKM_RSA_PKCS:
 	case PKCS11_CKM_MD5_RSA_PKCS:
 	case PKCS11_CKM_SHA1_RSA_PKCS:
+	case PKCS11_CKM_SHA1_RSA_PKCS_PSS:
 	case PKCS11_CKM_SHA256_RSA_PKCS:
 	case PKCS11_CKM_SHA384_RSA_PKCS:
 	case PKCS11_CKM_SHA512_RSA_PKCS:
+	case PKCS11_CKM_SHA256_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA384_RSA_PKCS_PSS:
+	case PKCS11_CKM_SHA512_RSA_PKCS_PSS:
 	case PKCS11_CKM_SHA224_RSA_PKCS:
+	case PKCS11_CKM_SHA224_RSA_PKCS_PSS:
 		*min_key_size = 256;	/* in bits */
 		*max_key_size = 4096;	/* in bits */
 		break;
-- 
2.25.1

